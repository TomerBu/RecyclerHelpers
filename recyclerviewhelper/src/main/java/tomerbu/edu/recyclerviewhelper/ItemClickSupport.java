package tomerbu.edu.recyclerviewhelper;

import android.support.v7.widget.RecyclerView;
import android.view.View;

/**
 * Code based on a blog post by Hugo from little robots:
 * http://www.littlerobots.nl/blog/Handle-Android-RecyclerView-Clicks/
 *
 * Usage:
 * ItemClickSupport.addTo(mRecyclerView).setOnItemClickListener(new OnItemClickListener({...});
 *
 * The idea of the implementations is like so:
 *
 *  A) register as a listener to RecyclerView.OnChildAttachStateChangeListener
 *     this listener get's notified when a ViewHolder is added/removed from the RecyclerView:
 *     example:
 *     void onChildViewAttachedToWindow(View v){}
 *
 *     A.1) once a view holder is attached register self as the v.OnClickListener
 *          notify our OnItemClickListeners of the v.onClick event
 *          using the recyclerView & view we get the ViewHolder.
 *
 *
 * B) The api supports addTo and removeFrom static methods. the addTo method is a singleTon
 *    Since we would like to maintain a Static API, rather than an instance based API:
 *    we inject self to the recyclerView using the setTag mechanism
 *    this way we can get self from the static removeFrom(recyclerView) method and remove the listeners
 *
 *
 *
 * */
public class ItemClickSupport {

    private final RecyclerView mRecyclerView;
    //variables of our interfaces type: (ItemClick, ItemLongClick) Items, Yay!!!
    //(the body of this items listeners is generated by the user of this class)
    private ItemClickSupport.OnItemClickListener mOnItemClickListener;
    private ItemClickSupport.OnItemLongClickListener mOnItemLongClickListener;

    //Variables of android View.OnClick Type.
    //Use the android's View.Onclick to notify our OnItemClick listener
    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (mOnItemClickListener != null) {
                //get a reference to the view holder using the recyclerView & given view
                RecyclerView.ViewHolder holder = mRecyclerView.getChildViewHolder(v);
                //notify the click listeners
                mOnItemClickListener.onItemClicked(mRecyclerView, holder.getAdapterPosition(), holder);
            }
        }
    };

    //similar in structure to onItemClick...
    private View.OnLongClickListener mOnLongClickListener = new View.OnLongClickListener() {
        @Override
        public boolean onLongClick(View v) {
            if (mOnItemLongClickListener != null) {
                RecyclerView.ViewHolder holder = mRecyclerView.getChildViewHolder(v);
                return mOnItemLongClickListener.onItemLongClicked(mRecyclerView, holder.getAdapterPosition(), holder);
            }
            return false;
        }
    };

    //The recyclerView gets a message whenever a ViewHolder is attached/detached from the RecyclerView
    //use this to add the click and LongClick Listeners to the recyclerView.
    private RecyclerView.OnChildAttachStateChangeListener mAttachListener
            = new RecyclerView.OnChildAttachStateChangeListener() {
        @Override
        public void onChildViewAttachedToWindow(View view) {
            if (mOnItemClickListener != null) {
                view.setOnClickListener(mOnClickListener);
            }
            if (mOnItemLongClickListener != null) {
                view.setOnLongClickListener(mOnLongClickListener);
            }
        }

        @Override
        public void onChildViewDetachedFromWindow(View view) {
            view.setOnClickListener(null);
            view.setOnClickListener(null);
        }
    };


    //singleton our object for each recyclerView
    public static synchronized ItemClickSupport addTo(RecyclerView view) {
        ItemClickSupport support = (ItemClickSupport) view.getTag(R.id.recyclerhelper);
        if (support == null) {
            support = new ItemClickSupport(view); //call our private constructor
        }
        return support;
    }

    //private ctor
    private ItemClickSupport(RecyclerView recyclerView) {
        mRecyclerView = recyclerView;
        mRecyclerView.setTag(R.id.recyclerhelper, this /*save this single ItemClickSupport instance in the tag of the views*/);
        mRecyclerView.addOnChildAttachStateChangeListener(mAttachListener);
    }

    public static ItemClickSupport removeFrom(RecyclerView view) {
        ItemClickSupport support = (ItemClickSupport) view.getTag(R.id.recyclerhelper);
        if (support != null) {
            support.detach(view);
        }
        return support;
    }

    public ItemClickSupport setOnItemClickListener(OnItemClickListener listener) {
        mOnItemClickListener = listener;
        return this;
    }

    public ItemClickSupport setOnItemLongClickListener(OnItemLongClickListener listener) {
        mOnItemLongClickListener = listener;
        return this;
    }

    //instance method as opposed to the static removeFrom method. this is why we separated it to 2 methods.
    private void detach(RecyclerView view) {
        view.removeOnChildAttachStateChangeListener(mAttachListener);
        view.setTag(R.id.recyclerhelper, null);
    }

    //Interfaces:
    public interface OnItemClickListener {

        void onItemClicked(RecyclerView recyclerView, int position, RecyclerView.ViewHolder holder);
    }

    public interface OnItemLongClickListener {

        boolean onItemLongClicked(RecyclerView recyclerView, int position, RecyclerView.ViewHolder holder);
    }
}